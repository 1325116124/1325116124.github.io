{"title":"移动端适配方案","uid":"a9eac29e649c447abc2a2b3730c7a7d0","slug":"移动端适配","date":"2022-03-23T07:40:42.253Z","updated":"2022-03-23T08:23:51.641Z","comments":true,"path":"api/articles/移动端适配.json","keywords":null,"cover":null,"content":"<p>本篇文章主要介绍一些移动端开发的属性，为读者详细介绍其中的细节，比如百分比的使用，em和rem区别，以及视口和像素等等概念，并为读者介绍他们的使用以及优劣，在本文的最后将提供一个移动端适配的终极解决方案，如果有其他的想法也可以评论留言</p>\n<h1 id=\"移动端开发\"><a href=\"#移动端开发\" class=\"headerlink\" title=\"移动端开发\"></a>移动端开发</h1><h2 id=\"像素\"><a href=\"#像素\" class=\"headerlink\" title=\"像素\"></a>像素</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;*\n1.什么是像素(Pixel)?\n在前端开发中视口的水平方向和垂直方向是由很多小方格组成的, 一个小方格就是一个像素\n例如div尺寸是100 x 100, 那么水平方向就占用100个小方格, 垂直方向就占用100个小方格\n\n2.像素特点\n不会随着视口大小的变化而变化, 像素是一个固定的单位(绝对单位)\n* *&#x2F;</code></pre>\n\n<h2 id=\"百分比\"><a href=\"#百分比\" class=\"headerlink\" title=\"百分比\"></a>百分比</h2><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;02-前端开发常用单位-百分比&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        .father&#123;\n            width: 200px;\n            height: 100px;\n            background: red;\n        &#125;\n        .son&#123;\n            &#x2F;**&#x2F;\n            width: 50%;\n            height: 50%;\n\n            &#x2F;*\n            padding-top: 50%;\n            padding-bottom: 50%;\n            padding-left: 50%;\n            padding-right: 50%;\n             *&#x2F;\n            &#x2F;*\n            margin-top: 50%;\n            margin-bottom: 50%;\n            margin-left: 50%;\n            margin-right: 50%;\n            background: blue;\n             *&#x2F;\n            border: 50% solid #000;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    &#x2F;*\n    1.什么是百分比?\n    百分比是前端开发中的一个动态单位, 永远都是以当前元素的父元素作为参考进行计算\n    例如父元素宽高都是200px, 设置子元素宽高是50%, 那么子元素宽高就是100px\n\n    2.百分比特点\n    2.1子元素宽度是参考父元素宽度计算的\n    2.2子元素高度是参考父元素高度计算的\n    2.3子元素padding无论是水平还是垂直方向都是参考父元素宽度计算的\n    2.4子元素margin无论是水平还是垂直方向都是参考父元素宽度计算的\n    2.5不能用百分比设置元素的border\n\n    结论: 百分比是一个动态的单位, 会随着父元素宽高的变化而变化(相对单位)\n    * *&#x2F;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h2 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h2><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;03-前端开发常用单位-em&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        .father&#123;\n            &#x2F;*font-size: 15px;*&#x2F;\n        &#125;\n        .son&#123;\n            &#x2F;*font-size: 12px;*&#x2F;\n            width: 10em;\n            height: 10em;\n            background: blue;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    &#x2F;*\n    1.什么是em?\n    em是前端开发中的一个动态单位, 是一个相对于元素字体大小的单位\n    例如font-size: 12px; ,那么1em就等于12px\n\n    2.em特点\n    2.1当前元素设置了字体大小, 那么就相对于当前元素的字体大小\n    2.2当前元素没有设置字体大小, 那么就相当于第一个设置字体大小的祖先元素的字体大小\n    2.3如果当前元素和所有祖先元素都没有设置大小, 那么就相当于浏览器默认的字体大小\n\n    结论: em是一个动态的单位, 会随着参考元素字体大小的变化而变化(相对单位)\n    * *&#x2F;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h2 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h2><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;04-前端开发常用单位-rem&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        html&#123;\n            font-size: 12px;\n        &#125;\n        .father&#123;\n            &#x2F;*font-size: 15px;*&#x2F;\n        &#125;\n        .son&#123;\n            &#x2F;*font-size: 12px;*&#x2F;\n            width: 10rem;\n            height: 10rem;\n            background: blue;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    &#x2F;*\n    1.什么是rem?\n    rem就是root em, 和em是前端开发中的一个动态单位,\n    rem和em的区别在于, rem是一个相对于根元素字体大小的单位\n    例如 根元素(html) font-size: 12px; ,那么1em就等于12px\n\n    2.rem特点\n    2.1除了根元素以外, 其它祖先元素的字体大小不会影响rem尺寸\n    2.2如果根元素设置了字体大小, 那么就相对于根元素的字体大小\n    2.3如果根元素没有设置字体大小, 那么就相对于浏览器默认的字体大小\n\n    结论: rem是一个动态的单位, 会随着根元素字体大小的变化而变化(相对单位)\n    * *&#x2F;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h2 id=\"vw、vh、vmin、vmax\"><a href=\"#vw、vh、vmin、vmax\" class=\"headerlink\" title=\"vw、vh、vmin、vmax\"></a>vw、vh、vmin、vmax</h2><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;title&gt;05-前端开发常用单位-vwvh&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        div&#123;\n            width: 10vmin;\n            height: 10vmax;\n            background: red;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div&gt;&lt;&#x2F;div&gt;\n&lt;script&gt;\n    &#x2F;*\n    1.什么是vw(Viewport Width)和vh(Viewport Height)?\n    1.1vw和vh是前端开发中的一个动态单位, 是一个相对于网页视口的单位\n    1.2系统会将视口的宽度和高度分为100份,1vw就占用视口宽度的百分之一, 1vh就占用视口高度的百分之一\n    1.3vw和vh和百分比不同的是, 百分比永远都是以父元素作为参考\n    而vw和vh永远都是以视口作为参考\n\n    结论: vw&#x2F;vh是一个动态的单位, 会随着视口大小的变化而变化(相对单位)\n\n    2.什么是vmin和vmax?\n    vmin: vw和vh中较小的那个\n    vmax: vw和vh中较大的那个\n    使用场景: 保证移动开发中屏幕旋转之后尺寸不变\n    * *&#x2F;\n    console.log(window.innerWidth, window.innerHeight);\n    let oDiv &#x3D; document.querySelector(&quot;div&quot;);\n    console.log(getComputedStyle(oDiv).width);\n    console.log(getComputedStyle(oDiv).height);\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h2 id=\"视口\"><a href=\"#视口\" class=\"headerlink\" title=\"视口\"></a>视口</h2><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, user-scalable&#x3D;no&quot;&gt;\n    &lt;title&gt;06-前端开发-视口&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        &#x2F;*\n        div&#123;\n            margin: 0 auto;\n        &#125;\n        .header-in&#123;\n            width: 980px;\n            height: 100px;\n            background: red;\n        &#125;\n        .main-in&#123;\n            width: 980px;\n            height: 300px;\n            background: green;\n        &#125;\n        .footer-in&#123;\n            width: 980px;\n            height: 100px;\n            background: blue;\n        &#125;\n         *&#x2F;\n        div&#123;\n            width: 200px;\n            height: 200px;\n            background: red;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div&gt;&lt;&#x2F;div&gt;\n&lt;!--\n&lt;div class&#x3D;&quot;header&quot;&gt;\n    &lt;div class&#x3D;&quot;header-in&quot;&gt;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;div class&#x3D;&quot;main&quot;&gt;\n    &lt;div class&#x3D;&quot;main-in&quot;&gt;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;div class&#x3D;&quot;footer&quot;&gt;\n    &lt;div class&#x3D;&quot;footer-in&quot;&gt;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n--&gt;\n&lt;script&gt;\n    &#x2F;*\n    1.什么是视口?\n    视口简单理解就是可视区域大小我们称之为视口\n    在PC端，视口大小就是浏览器窗口可视区域的大小\n    在移动端, 视口大小并不等于窗口大小, 移动端视口宽度被人为定义为了980\n\n    2.为什么是980而不是其他的值?\n    因为过去网页的版心都是980\n    乔老爷子为了能够让网页在移动端完美的展示, 所以将iOS手机视口的大小定义为了980\n    后来谷歌也觉得这是一个非常牛X的方案, 所以Android手机的视口也定义为了980\n\n    3.移动端自动将视口宽度设置为980带来的问题\n    虽然移动端自动将视口宽度设置为980之后让我们可以很完美的看到整个网页\n    但是由于移动端的物理尺寸(设备宽度)是远远小于视口宽度的\n    所以为了能够在较小的范围内看到视口中所有的内容, 那么就必须将内容缩小\n    (和前面讲解Canvas时讲解的viewbox一样, 近大远小原理)\n\n    4.如何保证在移动端不自动缩放网页的尺寸?\n    通过meta设置视口大小\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    width&#x3D;device-width 设置视口宽度等于设备的宽度\n    initial-scale&#x3D;1.0 初始缩放比例, 1不缩放\n    maximum-scale：允许用户缩放到的最大比例\n    minimum-scale：允许用户缩放到的最小比例\n    user-scalable：用户是否可以手动缩放\n    * *&#x2F;\n    console.log(window.innerWidth, window.innerHeight);\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h2 id=\"移动端适配方案\"><a href=\"#移动端适配方案\" class=\"headerlink\" title=\"移动端适配方案\"></a>移动端适配方案</h2><h3 id=\"方案一：媒体查询\"><a href=\"#方案一：媒体查询\" class=\"headerlink\" title=\"方案一：媒体查询\"></a>方案一：媒体查询</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;title&gt;07-移动端常用适配方案一&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        .top&#123;\n            position: relative;\n        &#125;\n        .top&gt;img&#123;\n            width: 100%;\n            height: auto;\n        &#125;\n        .top&gt;p&#123;\n            font-size: 16px;\n            color: #fff;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n            top: 33px;\n        &#125;\n        .middle, .bottom&#123;\n            position: relative;\n            height: 124px;\n        &#125;\n        .main&#123;\n            border: 1px dashed #0d7efb;\n            border-radius: 5px;\n            padding: 4px;\n            display: inline-block;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n        &#125;\n        .main&gt;img:nth-of-type(1)&#123;\n            width: 175px;\n            height: 116px;\n            vertical-align: bottom;\n        &#125;\n        .main&gt;img:nth-of-type(2)&#123;\n            width: 35px;\n            height: 35px;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n            top: 25px;\n        &#125;\n        .bottom&#123;\n            margin-top: 14px;\n        &#125;\n        @media screen and (min-width: 375px)&#123;\n            .top&gt;p&#123;\n                font-size: 18px;\n                top: 40px;\n            &#125;\n            .middle, .bottom&#123;\n                height: 143px;\n            &#125;\n            .main&gt;img:nth-of-type(1)&#123;\n                width: 206px;\n                height: 135px;\n            &#125;\n            .main&gt;img:nth-of-type(2)&#123;\n                width: 42px;\n                height: 42px;\n                top: 30px;\n            &#125;\n            .bottom&#123;\n                margin-top: 17px;\n            &#125;\n        &#125;\n        @media screen and (min-width: 414px)&#123;\n            .top&gt;p&#123;\n                font-size: 20px;\n                top: 43px;\n            &#125;\n            .middle, .bottom&#123;\n                height: 160px;\n                padding: 5px;\n            &#125;\n            .main&gt;img:nth-of-type(1)&#123;\n                width: 227px;\n                height: 150px;\n            &#125;\n            .main&gt;img:nth-of-type(2)&#123;\n                width: 45px;\n                height: 45px;\n                top: 35px;\n            &#125;\n            .bottom&#123;\n                margin-top: 19px;\n            &#125;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;top&quot;&gt;\n    &lt;img src&#x3D;&quot;images&#x2F;bg.png&quot; alt&#x3D;&quot;&quot;&gt;\n    &lt;p&gt;实名认证&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;\n&lt;div class&#x3D;&quot;middle&quot;&gt;\n    &lt;div class&#x3D;&quot;main&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;back.png&quot; alt&#x3D;&quot;&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;add.png&quot; alt&#x3D;&quot;&quot;&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;div class&#x3D;&quot;bottom&quot;&gt;\n    &lt;div class&#x3D;&quot;main&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;back.png&quot; alt&#x3D;&quot;&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;add.png&quot; alt&#x3D;&quot;&quot;&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    &#x2F;*\n    1.通过媒体查询\n     媒体查询的方式可以说是我早期采用的布局方式，\n     它主要是通过查询设备的宽度来执行不同的css代码，最终达到界面的配置\n\n     2.媒体查询优势\n     简单, 哪里不对改哪里\n     调整屏幕宽度的时候不用刷新页面即可响应式展示\n     特别适合对移动短和PC维护同一套代码的时候\n\n     3.媒体查询劣势\n     由于移动端和PC端维护同一套代码, 所以代码量比较大，维护不方便\n     为了兼顾大屏幕或高清设备，会造成其他设备资源浪费，特别是加载图片资源\n     为了兼顾移动端和PC端各自响应式的展示效果，难免会损失各自特有的交互方式\n\n     4.应用场景\n     对于比较简单(界面不复杂)的网页, 诸如: 企业官网、宣传单页等\n     我们可以通过媒体查询、伸缩布局、Bootstrap来实现响应式站点\n\n     对于比较复杂(界面复杂)的网页, 诸如: 电商、团购等\n     更多的则是才是PC端一套代码, 移动端一套代码\n    * *&#x2F;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"页面自动跳转\"><a href=\"#页面自动跳转\" class=\"headerlink\" title=\"页面自动跳转\"></a>页面自动跳转</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;08-移动端常用适配方案-界面自动跳转&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;script&gt;\n    &#x2F;*\n    1.如何实现PC端一套代码,移动端一套代码,\n    在PC端打开自动打开PC端界面\n    在移动端打开自动打开移动端界面\n\n    2.实现步骤:\n    2.1默认打开PC端界面\n    2.2在PC端界面中通过BOM拿到当前浏览器信息\n    2.3通过正则判断当前浏览器是否是移动端浏览器\n    2.4通过BOM的location对象实现跳转到移动端界面\n    * *&#x2F;\n\n    &#x2F;*\n    PC:     Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;73.0.3683.86 Safari&#x2F;537.36\n    移动端: Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit&#x2F;604.1.38 (KHTML, like Gecko) Version&#x2F;11.0 Mobile&#x2F;15A372 Safari&#x2F;604.1\n    移动端: Mozilla&#x2F;5.0 (Linux; Android 5.0; SM-G900P Build&#x2F;LRX21T) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;73.0.3683.86 Mobile Safari&#x2F;537.36\n    * *&#x2F;\n    &#x2F;&#x2F; let userAgentInfo &#x3D; navigator.userAgent;\n    &#x2F;&#x2F; console.log(userAgentInfo);\n    function isPc() &#123;\n        let userAgentInfo &#x3D; navigator.userAgent;\n        if(&#x2F;iphone&#x2F;i.test(userAgentInfo))&#123;\n            return false;\n        &#125;else if(&#x2F;android&#x2F;i.test(userAgentInfo))&#123;\n            return false;\n        &#125;\n        return true;\n    &#125;\n    if(!isPc())&#123;\n        location.href &#x3D; &quot;http:&#x2F;&#x2F;m.jd.com&quot;;\n    &#125;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"方案二：通过rem适配\"><a href=\"#方案二：通过rem适配\" class=\"headerlink\" title=\"方案二：通过rem适配\"></a>方案二：通过rem适配</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;09-移动端常用适配方案二&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;script&gt;\n    &#x2F;*\n    1.通过媒体查询 + rem\n    虽然我们将移动端独立到一套代码中了, 但是由于移动端也有很多的屏幕尺寸, 所以也需要进行适配\n    例如:\n    iPhone3&#x2F;4&#x2F;5:  320px\n    iPhone678:    375px\n    iPhoneX&#x2F;plus: 414px\n\n    当下在企业开发中设计师提供给我们的移动端设计图片是750*xxx的或者1125*xxx的\n    所以我们需要对设计师提供的图片进行等比缩放, 这样才能1:1还原设计图片\n\n    2.如何等比缩放?\n    2.1将设计图片等分为指定份数,求出每一份的大小\n       例如: 750设计图片分为7.5份, 那么每一份的大小就是100px\n    2.2将目标屏幕也等分为指定份数,求出每一份的大小\n       例如: 375屏幕也分为7.5份, 那么每一份的大小就是50px\n\n    2.3用 原始元素尺寸 &#x2F; 原始图片每一份大小 * 目标屏幕每一份大小 &#x3D; 等比缩放后的尺寸\n       例如: 设计图片上有一个150*150的图片, 我想等比缩放显示到375屏幕上\n       那么: 150 &#x2F; 100 * 50 &#x3D; 1.5*50 &#x3D; 75px\n\n    3.如何在前端开发中应用这个计算公式?\n    3.1目标屏幕每一份的大小就是html的font-size: 50px\n    3.2使用时只需要用 &quot;原始元素尺寸 &#x2F; 原始图片每一份大小rem&quot; 即可\n                      150 &#x2F; 100 &#x3D; 1.5 &#x2F; 1.5rem\n                      1rem &#x3D; 50px  &#x2F; 1.5rem &#x3D;&#x3D;&#x3D; 1.5*50 &#x3D; 75px\n\n    4.大公司应用实例\n    4.1网易新闻\n        750&#x2F;100&#x3D;7.5\n        375&#x2F;7.5&#x3D;50;\n        320&#x2F;7.5&#x3D;42.7;\n    4.2苏宁易购\n        750&#x2F;50&#x3D;15\n        375&#x2F;15&#x3D;25\n        320&#x2F;15&#x3D;21.33\n    * *&#x2F;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;title&gt;10-移动端常用适配方案二-练习&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;less&quot;&gt;\n        *&#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        @media screen and (max-width: 320px)&#123;\n            &#x2F;*\n            750 &#x2F; 7.5 &#x3D; 100\n            320 &#x2F; 7.5 &#x3D; 42.67\n            iphone5:\n            *&#x2F;\n            html&#123;\n                font-size: 42.67px;\n            &#125;\n        &#125;\n        @media screen and (min-width: 375px)&#123;\n            &#x2F;*\n            750 &#x2F; 7.5 &#x3D; 100\n            375 &#x2F; 7.5 &#x3D; 50\n            iphone6:\n            *&#x2F;\n            html&#123;\n                font-size: 50px;\n            &#125;\n        &#125;\n        @media screen and (min-width: 414px)&#123;\n            &#x2F;*\n            750 &#x2F; 7.5 &#x3D; 100\n            414 &#x2F; 7.5 &#x3D; 50\n            iphone6Plus:\n            *&#x2F;\n            html&#123;\n                font-size: 55.2px;\n            &#125;\n        &#125;\n        .top&#123;\n            position: relative;\n        &#125;\n        .top&gt;img&#123;\n            width: 100%;\n            height: auto;\n        &#125;\n        .top&gt;p&#123;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n            top: 80&#x2F;100rem;\n            font-size: 36&#x2F;100rem;\n            color: #fff;\n        &#125;\n        .middle, .bottom&#123;\n            position: relative;\n            height: 290&#x2F;100rem;\n        &#125;\n        .main&#123;\n            border: 1px dashed #0d7efb;\n            border-radius: 5&#x2F;100rem;\n            padding: 10&#x2F;100rem;\n            display: inline-block;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n        &#125;\n        .main&gt;img:nth-of-type(1)&#123;\n            width: 410&#x2F;100rem;\n            height: 270&#x2F;100rem;\n            vertical-align: bottom;\n        &#125;\n        .main&gt;img:nth-of-type(2)&#123;\n            width: 84&#x2F;100rem;\n            height: 84&#x2F;100rem;\n            vertical-align: bottom;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n            top: 60&#x2F;100rem;\n        &#125;\n        .bottom&#123;\n            margin-top: 35&#x2F;100rem;\n        &#125;\n    &lt;&#x2F;style&gt;\n    &lt;script src&#x3D;&quot;js&#x2F;less.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;top&quot;&gt;\n    &lt;img src&#x3D;&quot;images&#x2F;bg.png&quot; alt&#x3D;&quot;&quot;&gt;\n    &lt;p&gt;实名认证&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;\n\n&lt;div class&#x3D;&quot;middle&quot;&gt;\n    &lt;div class&#x3D;&quot;main&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;back.png&quot; alt&#x3D;&quot;&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;add.png&quot; alt&#x3D;&quot;&quot;&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n\n&lt;div class&#x3D;&quot;bottom&quot;&gt;\n    &lt;div class&#x3D;&quot;main&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;back.png&quot; alt&#x3D;&quot;&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;add.png&quot; alt&#x3D;&quot;&quot;&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"方案三：通过js设置fontSize\"><a href=\"#方案三：通过js设置fontSize\" class=\"headerlink\" title=\"方案三：通过js设置fontSize\"></a>方案三：通过js设置fontSize</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;title&gt;11-移动端常用适配方案三&lt;&#x2F;title&gt;\n    &lt;script&gt;\n        &#x2F;*\n        注意点: 通过JS动态计算当前屏幕每一份大小的好处: 不用写很多的媒体查询\n                坏处: 切换了屏幕尺寸之后需要刷新界面才有效\n                      而媒体查询如果切换了屏幕的尺寸不需要重新刷新界面\n        * *&#x2F;\n        document.documentElement.style.fontSize &#x3D; window.innerWidth &#x2F; 7.5 + &quot;px&quot;;\n    &lt;&#x2F;script&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;less&quot;&gt;\n        *&#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        &#x2F;*\n        1.计算设计图片每一份大小: 750 &#x2F; 7.5 &#x3D; 100px\n        2.计算当前屏幕每一份大小: 当前屏幕宽度 &#x2F; 和设计图相同的分数 &#x3D; 当前屏幕每一份大小\n        *&#x2F;\n        &#x2F;*\n        @media screen and (max-width: 320px)&#123;\n            html&#123;\n                font-size: 42.67px;\n            &#125;\n        &#125;\n        @media screen and (min-width: 375px)&#123;\n            html&#123;\n                font-size: 50px;\n            &#125;\n        &#125;\n        @media screen and (min-width: 414px)&#123;\n            html&#123;\n                font-size: 55.2px;\n            &#125;\n        &#125;\n         *&#x2F;\n        .top&#123;\n            position: relative;\n        &#125;\n        .top&gt;img&#123;\n            width: 100%;\n            height: auto;\n        &#125;\n        .top&gt;p&#123;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n            top: 80&#x2F;100rem;\n            font-size: 36&#x2F;100rem;\n            color: #fff;\n        &#125;\n        .middle, .bottom&#123;\n            position: relative;\n            height: 290&#x2F;100rem;\n        &#125;\n        .main&#123;\n            border: 1px dashed #0d7efb;\n            border-radius: 5&#x2F;100rem;\n            padding: 10&#x2F;100rem;\n            display: inline-block;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n        &#125;\n        .main&gt;img:nth-of-type(1)&#123;\n            width: 410&#x2F;100rem;\n            height: 270&#x2F;100rem;\n            vertical-align: bottom;\n        &#125;\n        .main&gt;img:nth-of-type(2)&#123;\n            width: 84&#x2F;100rem;\n            height: 84&#x2F;100rem;\n            vertical-align: bottom;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n            top: 60&#x2F;100rem;\n        &#125;\n        .bottom&#123;\n            margin-top: 35&#x2F;100rem;\n        &#125;\n    &lt;&#x2F;style&gt;\n    &lt;script src&#x3D;&quot;js&#x2F;less.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;top&quot;&gt;\n    &lt;img src&#x3D;&quot;images&#x2F;bg.png&quot; alt&#x3D;&quot;&quot;&gt;\n    &lt;p&gt;实名认证&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;\n\n&lt;div class&#x3D;&quot;middle&quot;&gt;\n    &lt;div class&#x3D;&quot;main&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;back.png&quot; alt&#x3D;&quot;&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;add.png&quot; alt&#x3D;&quot;&quot;&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n\n&lt;div class&#x3D;&quot;bottom&quot;&gt;\n    &lt;div class&#x3D;&quot;main&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;back.png&quot; alt&#x3D;&quot;&quot;&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;add.png&quot; alt&#x3D;&quot;&quot;&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"css像素和设备像素\"><a href=\"#css像素和设备像素\" class=\"headerlink\" title=\"css像素和设备像素\"></a>css像素和设备像素</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;title&gt;12-设备像素和CSS像素&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        div&#123;\n            width: 100px;\n            height: 100px;\n            border: 1px solid #000;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div&gt;&lt;&#x2F;div&gt;\n&lt;script&gt;\n    &#x2F;*\n    1.什么是设备像素和CSS像素?\n    1.1设备像素又称为物理像素, 是&quot;物理屏幕&quot;上真实存在的发光点，只有屏幕一经出厂就固定不会改变\n    1.2CSS像素又称为逻辑像素，是编程世界中虚拟的东西, 我们通过代码设置的像素都是逻辑像素\n\n    例如: iPhone3G&#x2F;iPhone3GS 3.5英寸&#x2F; 逻辑像素320*480 &#x2F; 设备像素320*480\n          iPhone4&#x2F;4S         3.5英寸&#x2F; 逻辑像素320*480 &#x2F; 设备像素640*960\n    也就是说CSS像素和设备像素在有的时候是不一样的\n\n    3.什么时候不一样?为什么不一样?\n    3.1在PC端，1个CSS像素往往都是对应着电脑屏幕的1个物理像素,\n     所以我们无需关心PC端的CSS像素和设备像素\n\n    3.2在手机端，最开始其实1个CSS个像素也是对应着手机屏幕的1个物理像素,\n    但是后来一个改变世界的男人(乔布斯)改变了这一切~\n    从iPhone4开始，苹果公司推出了所谓的retina视网膜屏幕。\n    iPhone4的屏幕尺寸却没有变化，但是像素点却多了一倍\n    这就导致了在1个CSS个像素等于1个物理像素的手机上, 我们设置1个CSS像素只会占用1个物理像素\n    而在1个CSS个像素不等于1个物理像素的手机上, 我们设置1个CSS像素就会占用2个物理像素\n    所以仔细观察你会发现同样是1像素但是在retina视网膜屏幕的手机上会粗一些\n\n    https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000015736900\n    https:&#x2F;&#x2F;ask.csdn.net&#x2F;questions&#x2F;692608\n    *&#x2F;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"方案四：解决缩放问题（终极版）\"><a href=\"#方案四：解决缩放问题（终极版）\" class=\"headerlink\" title=\"方案四：解决缩放问题（终极版）\"></a>方案四：解决缩放问题（终极版）</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;script&gt;\n    &#x2F;*\n        1.如何解决设备像素和CSS像素不一样的问题?\n        如果设备像素和CSS像素一样, 那么无需处理不会带来任何负面影响\n        如果设备像素是CSS像素的2倍, 那么我们只需将CSS像素缩小一半即可\n        但是有时候设备像素可能是CSS像素的3倍&#x2F;4倍...\n\n        2.获取设备像素比DPR(Device Pixel Ratio)\n        DPR &#x3D; 设备像素 &#x2F; CSS像素\n        iPhone3GS :  320 &#x2F; 320 &#x3D; 1\n        iPhone4S:    640 &#x2F; 320 &#x3D; 2\n        iPhone678:   750 &#x2F; 375 &#x3D; 2\n        iPhoneX:     1125 &#x2F; 375 &#x3D; 3\n        在JS中我们可以通过 window.devicePixelRatio 获取当前的设备像素\n\n        3.如何缩小?\n        通过 &lt;meta name&#x3D;&quot;viewport&quot;&gt;的initial-scale属性来缩小\n        注意点: 缩放视口后视口大小会发生变化\n        * *&#x2F;\n    &#x2F;&#x2F; console.log(1.0 &#x2F; window.devicePixelRatio); &#x2F;&#x2F; 1 &#x2F; 1 &#x3D; 1;  1 &#x2F; 2 &#x3D; 0.5;\n    let scale &#x3D; 1.0 &#x2F; window.devicePixelRatio;\n    let text &#x3D; &#96;&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;$&#123;scale&#125;, maximum-scale&#x3D;$&#123;scale&#125;, minimum-scale&#x3D;$&#123;scale&#125;, user-scalable&#x3D;no&quot;&gt;&#96;;\n    document.write(text);\n\n    document.documentElement.style.fontSize &#x3D; window.innerWidth &#x2F; 7.5 + &quot;px&quot;;\n&lt;&#x2F;script&gt;</code></pre>","text":"本篇文章主要介绍一些移动端开发的属性，为读者详细介绍其中的细节，比如百分比的使用，em和rem区别，以及视口和像素等等概念，并为读者介绍他们的使用以及优劣，在本文的最后将提供一个移动端适配的终极解决方案，如果有其他的想法也可以评论留言 移动端开发像素&#x2F;* 1.什么是像素...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"22 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">移动端开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%83%8F%E7%B4%A0\"><span class=\"toc-text\">像素</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%99%BE%E5%88%86%E6%AF%94\"><span class=\"toc-text\">百分比</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#em\"><span class=\"toc-text\">em</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#rem\"><span class=\"toc-text\">rem</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vw%E3%80%81vh%E3%80%81vmin%E3%80%81vmax\"><span class=\"toc-text\">vw、vh、vmin、vmax</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%86%E5%8F%A3\"><span class=\"toc-text\">视口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">移动端适配方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%A1%88%E4%B8%80%EF%BC%9A%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">方案一：媒体查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E9%9D%A2%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC\"><span class=\"toc-text\">页面自动跳转</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%A1%88%E4%BA%8C%EF%BC%9A%E9%80%9A%E8%BF%87rem%E9%80%82%E9%85%8D\"><span class=\"toc-text\">方案二：通过rem适配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%A1%88%E4%B8%89%EF%BC%9A%E9%80%9A%E8%BF%87js%E8%AE%BE%E7%BD%AEfontSize\"><span class=\"toc-text\">方案三：通过js设置fontSize</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#css%E5%83%8F%E7%B4%A0%E5%92%8C%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0\"><span class=\"toc-text\">css像素和设备像素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%A1%88%E5%9B%9B%EF%BC%9A%E8%A7%A3%E5%86%B3%E7%BC%A9%E6%94%BE%E9%97%AE%E9%A2%98%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89\"><span class=\"toc-text\">方案四：解决缩放问题（终极版）</span></a></li></ol></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/1325116124","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{}}